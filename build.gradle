apply plugin: 'java'

apply from: 'gradle/gradle/helpers.gradle'

sourceSets {
    main {
        java      { srcDirs = ['src/main/java']}
        resources { srcDirs = ['src/main/resources']}
    }
    test {
        java      { srcDirs = ['src/test/java']}
        resources { srcDirs = ['src/test/resources']}
    }
}

project.ext{
    title = 'Remote keyboard and Mouse'
    mainClass = 'io.github.zkhan93.rkms.Main'

    applicationVersion = "0.4.9-alpha"
    applicationVersionDebian = "1";

    applicationRelease = isApplicationRelease()
    applicationDate = new Date()
    applicationRevision = getRevision()

    applicationVersionSnapshot = (!applicationRelease) ? "+SNAPSHOT.${asUTC(applicationDate, 'yyMMddHHmm')}.git${applicationRevision}" : ""
    applicationVersionFull = "${applicationVersion}${applicationVersionSnapshot}"
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // this dependency is only required when using UserJvmOptionsService
    // when using Oracle JDK
    // compile files("${System.properties['java.home']}/../lib/packager.jar")
    // when using OpenJFX (Ubuntu), please adjust accordingly
    // compile files("/usr/share/java/openjfx/lib/packager.jar")
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'com.github.kenglxn.QRGen:javase:2.2.0'
    compile 'com.google.code.gson:gson:2.8.0'
}

task buildJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': applicationVersion,
                'Main-Class': mainClass

    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Windows Installer ///////////////////////////////////////////////////////////

task exe(dependsOn: [buildJar]) << {
    def innoSetupDir = new File("${buildDir}/innosetup")

    delete innoSetupDir
    innoSetupDir.mkdir();

    copy {
        from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
        from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
        from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")
        from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")
        from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")
        from("${rootProject.projectDir}/gradle/innosetup/modpath.iss")
        from("${rootProject.projectDir}/gradle/innosetup/code.iss")
        into(innoSetupDir)
    }

    copy {
        from("${rootProject.projectDir}/gradle/innosetup/setup-cli.iss.skel")
        rename("setup-cli.iss.skel", "setup-cli.iss")
        expand([
                applicationVersion: "${applicationVersion}",
                applicationVersionFull: "${applicationVersionFull}",
        ])
        into(innoSetupDir)
    }

    exec {
        workingDir rootProject.projectDir
        commandLine ["C:\\Program Files (x86)\\Inno Setup 5\\iscc", "${innoSetupDir}/setup-cli.iss"]
    }

    if (!project.ext.has('exeDontCopyToUpload')) {
        copy {
            from files("${buildDir}/innosetup")
            include "*.exe"
            into file("build/upload")
        }
    }
}
task log {
    exec {
        commandLine ["C:\\Program Files (x86)\\Inno Setup 5\\iscc.exe",'setup-cli.iss']
    }
}